"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { generateContent, type GenerateContentInput } from "@/ai/flows/generate-content";

import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Wand2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const formSchema = z.object({
  prompt: z.string().min(5, { message: "Prompt must be at least 5 characters." }).max(1000, {message: "Prompt must be at most 1000 characters."}),
});

type GenerateContentFormValues = z.infer<typeof formSchema>;

export function GenerateContentClient() {
  const [isLoading, setIsLoading] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<GenerateContentFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: "",
    },
  });

  async function onSubmit(data: GenerateContentFormValues) {
    setIsLoading(true);
    setGeneratedContent(null);
    try {
      const input: GenerateContentInput = { prompt: data.prompt };
      const result = await generateContent(input);
      setGeneratedContent(result.generatedContent);
      toast({
        title: "Content Generated!",
        description: "New content has been successfully generated by AI.",
      });
    } catch (error) {
      console.error("Error generating content:", error);
      toast({
        title: "Error",
        description: "Failed to generate content. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="space-y-6">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <FormField
            control={form.control}
            name="prompt"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-lg">Your Prompt</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder="e.g., Write a short blog post about the future of AI in education..."
                    className="min-h-[100px] text-base"
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button type="submit" className="w-full text-lg py-6 bg-primary hover:bg-primary/90 text-primary-foreground" disabled={isLoading}>
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-5 w-5 animate-spin" /> Generating...
              </>
            ) : (
              <>
                <Wand2 className="mr-2 h-5 w-5" /> Generate Content
              </>
            )}
          </Button>
        </form>
      </Form>

      {generatedContent && (
        <Card className="mt-8 shadow-md">
          <CardHeader>
            <CardTitle className="text-2xl text-center">Generated Content</CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea value={generatedContent} readOnly className="min-h-[250px] bg-muted/30 text-base" />
            <Button 
              variant="outline" 
              className="mt-4 w-full"
              onClick={() => {
                navigator.clipboard.writeText(generatedContent);
                toast({ title: "Copied!", description: "Generated content copied to clipboard."});
              }}
            >
              Copy Content
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
